#!/bin/bash

#
# Â©K. D. Hedger. Thu  1 Jun 14:27:16 BST 2017 kdhedger68713@gmail.com
#
# This file (runservices) is part of Init-For-LFS.
#
# Init-For-LFS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# at your option) any later version.
#
# Projects is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Init-For-LFS.  If not, see <http://www.gnu.org/licenses/>.
#

mountTmpFS ()
{
	if ! mountpoint ${SERVICERUNFOLDER} &>/dev/null;then
		mount -t tmpfs -o size=512m tmpfs ${SERVICERUNFOLDER}
	fi
}

makeMessagePipe ()
{
	if [ -e ${SERVICEPIPE} ];then
		return
	fi

	if [ -w ${SERVICERUNFOLDER} ];then
		while [ ! -e ${SERVICEPIPE} ]
			do
				printInfo "No service pipe trying again in 5 seconds ..."
				sleep 5
				mkfifo ${SERVICEPIPE} &>/dev/null||true
			done
	else
		mountTmpFS
		makeMessagePipe
	fi
}

init ()
{
	export CONFFOLDER="@@SYSCONFDIR@@"
	export BINDIR="@@SBINDIR@@"

	SERVICEBASE="$CONFFOLDER/StartupServices"
	export SERVICERUNFOLDER=$CONFFOLDER/StartupServices/runtime
	mountTmpFS

	VERBOSELEVEL=2

	if [ -e $CONFFOLDER/service.rc ];then
		. $CONFFOLDER/service.rc
	fi

	if [ -e ~/.config/service.rc ];then
		. ~/.config/service.rc
	fi

	SERVICEDATA=${SERVICEBASE}/servicedata
	SERVICEFILESFOLDER=${SERVICEBASE}/servicefiles
	SERVICERUNFILES=${SERVICERUNFOLDER}/servicerunfiles
	SERVICEFILE=${SERVICEFILE:-services}
	PIDFOLDER=${SERVICERUNFOLDER}/servicepids
	LOGSFOLDER=${SERVICERUNFOLDER}/servicelogs
	SERVICEPIPE=${SERVICERUNFOLDER}/servicepipe

	LOGFILE=
	COMMAND=
	RUNTYPE=
	PIDFILE=
	BASENAME=
	RETRYS=3
	SLEEPTIME=1
	MYLOG=${LOGSFOLDER}/runservices.log
	PIDFILECNT=1
	IMRUNNING=1
	FIRSTRUNFLAG=1

	TOPTY=

	mkfifo ${SERVICEPIPE} &>/dev/null||true
	mkdir -p "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
	printInfo "$(date)"
}

echoWrap ()
{
	if [ "X$TOPTY" = "X" ];then
		echo "$@"
	else
		echo $@ >$TOPTY
	fi
}

printInfo ()
{
	case $VERBOSELEVEL in
		0)
			return
			;;
		1)
			echo "$1" 2>/dev/null >> $MYLOG
			;;
		2)
			echoWrap "$1"
			echo "$1" 2>/dev/null >> $MYLOG
			;;
		esac
}

doService ()
{
	local command
	local pid
	local pidfile
	local logfile
	local tries

	if [ "X$COMMAND" != "X" ];then

		if [ "X$LOGFILE" != "X" ];then
			logfile=${LOGSFOLDER}/${LOGFILE}
		else
			logfile="/dev/null"
		fi

		if [ "X$PIDFILE" = "X" ];then
			pidfile=${PIDFOLDER}/${BASENAME}.pid
		fi


	($COMMAND) &>$logfile &
	pid=$!

	if [ "X$(ps --no-headers $pid)" = "X" ];then
		tries=$RETRYS
		printInfo "Error runing command $COMMAND ..."
		while [ "X$(ps --no-headers $pid)" = "X" ]
			do
				for((j=1;j<RETRYS;j++))
					do
						($COMMAND) &>$logfile &
						pid=$!
						((tries--))
						printInfo "$tries tries left ..."
						sleep 1
					done
				printInfo "Can't run $BASENAME, giving up ..."
				rm $pidfile &>/dev/null||true
				return
			done
	fi
			
	echo $pid > $pidfile
	fi
}

doRunService ()
{
	local base command logfile pidfile runtype
	local pid
	local tries
	local exitcode
	local failed
	local count

	base=$1
	command=$2
	logfile=$3
	pidfile=$4
	runtype=$5

	if [ "X$command" != "X" ];then
		if [ $runtype != "nocontrol" ];then
			if [ -e "$pidfile" ];then
				if [ "X$(ps  --no-headers $(cat "$pidfile"))" = "X" ];then
					printInfo "Removing stale pidfile ..."
					rm $pidfile||true
				else
					printInfo "Already running under my control, doing nothing ..."
					return
				fi
			fi
		fi

		if [ $runtype = "once" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do
					$command &  2>&1 |tee -a $logfile
					pid=$!
#check whether process is still running
					count=$(ps -A| grep $pid |wc -l)
#if process is already terminated, then there can be two cases, the process executed and stop successfully or it is terminated abnormally
					if [[ $count -eq 0 ]];then
#checks if process executed successfully or not
						if wait $pid; then
							break;
						else
#process terminated abnormally
							printInfo "Try $j failed (returned $?), Trying again ..."
							failed=1
						fi
					else
#process is still running
						echo $pid > $pidfile
						break
					fi
				done
			if [ $failed -eq 1 ];then
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

		if [ $runtype = "keepalive" ];then
			touch ${SERVICERUNFILES}/${base}.${PIDFILECNT}.keepalive
			file=${SERVICERUNFILES}/${base}.${PIDFILECNT}.runfile
			cat > $file << EOF
#!/bin/bash
	exec 2>/dev/null
	while [ -e ${base}.${PIDFILECNT}.keepalive ]
		do
			$command & 2>&1 |tee -a $logfile
			pid=\$!
			echo \$pid > $pidfile
			while kill -0 \$pid &>/dev/null
				do
					sleep 1
				done
			sleep 1
		done
EOF
			chmod +x $file
			(cd ${SERVICERUNFILES};./${base}.${PIDFILECNT}.runfile &>/dev/null) &
			printInfo "$base launched succsefully"
		fi

		if [ $runtype = "nocontrol" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do
					$command & 2>&1 |tee -a $logfile
					pid=$!
#check whether process is still running
					count=$(ps -A| grep $pid |wc -l)
#if process is already terminated, then there can be two cases, the process executed and stop successfully or it is terminated abnormally
					if [[ $count -eq 0 ]];then
#checks if process executed successfully or not
						if wait $pid; then
        		        	break;
						else
#process terminated abnormally
							printInfo "Try $j failed (returned $?), Trying again ..."
							failed=1
						fi
					else
#process is still running
						break
					fi
				done
			if [ $failed -eq 1 ];then
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

#wait for command to finish
		if [ $runtype = "wait" ];then
			$command 2>&1 |tee -a $logfile
		fi
	fi
}

runOneService ()
{
	local com
	local args
	local base logfile command runtype pidfile
	local comcnt
	local serviceargs

	base=${1%%.?*}
	serviceargs=$2

	pidfile=${PIDFOLDER}/${base}.${PIDFILECNT}.pid	
	logfile=${LOGSFOLDER}/${base}.log
	runtype="once"
#set files etc
	while read
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//')"
			case "$com" in
				"LOGFILE")
					logfile=$args
					;;
				"RUNTYPE")
					runtype=$args
					;;
				"PIDFILE")
					pidfile=$args
					;;
			esac
		done < ${SERVICEFILESFOLDER}/${base}.service

#run the commands
	while read
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//') $serviceargs"
			if [ "X$com" = "XCOMMAND" ];then
				if [ "X$args" != "X" ] ;then
					doRunService $base "$args" $logfile $pidfile $runtype < /dev/null
					sleep 0.1
				fi
			fi
		done < <(cat ${SERVICEFILESFOLDER}/${base}.service)
	(( PIDFILECNT++ ))
}

runAllServices ()
{
	local replyarray

	rm ${PIDFOLDER}/*.pid &>/dev/null||true
	while read
		do
			replyarray=( $REPLY )
			if [ "X${replyarray[0]}" != "X" ];then
				if [ "X${replyarray[0]##?*.}" = "Xservice" ];then
					printInfo "launching ${replyarray[0]}"
					runOneService ${replyarray[0]%%.?*} ${replyarray[1]}
				else
					printInfo "Evaluating command $REPLY"
					eval "${REPLY}"
				fi
			fi
		done < ${SERVICEDATA}/${SERVICEFILE}
}	

killService ()
{
	local serv="$1"

	if [ -e  ${PIDFOLDER}/${serv}.pid ];then
		rm ${SERVICERUNFILES}/${serv}.keepalive &>/dev/null||true
		kill -9 $(cat ${PIDFOLDER}/${serv}.pid)
		wait $(cat ${PIDFOLDER}/${serv}.pid) &>/dev/null
		rm  ${PIDFOLDER}/$serv.pid &>/dev/null||true
		rm ${SERVICERUNFILES}/${serv}.runfile &>/dev/null||true
		printInfo "Killed $serv"
	else
		printInfo "$serv not under my control ..."
	fi
}

killAllServices ()
{
	while read
		do
			printInfo "Killing ${REPLY%.pid} ..."
			killService "$(basename "$REPLY" ".pid" )" &>/dev/null
		done < <(find "${PIDFOLDER}" -maxdepth 1 -iname "*.pid")
}	

printLogfile ()
{
	local logname="$1"

	if [ "X$logname" = "XME" ];then
		logname="runservices"
	fi

	if [ -e  ${LOGSFOLDER}/${logname}.log ];then
		if [ "X$TOPTY" = "X" ];then
			cat ${LOGSFOLDER}/${logname}.log
		else
			cat ${LOGSFOLDER}/${logname}.log > $TOPTY
		fi
	else
		echoWrap "No log for $1 ..."
	fi
}

removeLog ()
{
	if [ -e  ${LOGSFOLDER}/${1}.log ];then
		rm ${LOGSFOLDER}/${1}.log
	else
		echoWrap "No log for $1 ..."
	fi
}

removeAllLogs ()
{
	rm ${LOGSFOLDER}/*.log||true
}

showPid ()
{
	while read
		do
			echoWrap "Pid of $(basename "$REPLY")=$(cat $REPLY)"
		done < <(find "${PIDFOLDER}" -maxdepth 1 -iname "*.pid")
}

showStatus ()
{
	local count
	local pid

	if [ -e ${PIDFOLDER}/${1}.pid ];then
		pid=$(cat ${PIDFOLDER}/${1}.pid)
		echoWrap "Recorded pid of $1=$pid"
		count=$(ps -A| grep $pid |wc -l)
		if [[ $count -eq 0 ]];then
			echoWrap "Hmmm ... $1 seems to have exited"
		else
			echoWrap "Details:"
			ps $pid
			if [ -e ${SERVICERUNFILES}/${1}.runfile ];then
				echoWrap "Keeping alive file=${SERVICERUNFILES}/${1}.runfile"
			fi
			if [ -e ${LOGSFOLDER}/${1}.log ];then
				echoWrap "Logfile=${LOGSFOLDER}/${1}.log"
			fi
		fi
	else
		printInfo "$1 not under my control ..."
	fi
}

doReboot ()
{
	killAllServices
	rm  ${SERVICEPIPE}
	$CONFFOLDER/StartupServices/startups/3
	umount -f "$SERVICERUNFOLDER" &>/dev/null
	mount -n -o remount,ro / &>/dev/null
	IMRUNNING=0
	$BINDIR/poweroff -r now
}

doShutdown ()
{
	killAllServices
	rm  ${SERVICEPIPE}
	$CONFFOLDER/StartupServices/startups/3
	umount -f "$SERVICERUNFOLDER" &>/dev/null
	mount -n -o remount,ro / &>/dev/null
	IMRUNNING=0
	$BINDIR/poweroff -h now
}

main ()
{
	local command=$1

	if [ "X$command" = "X" ];then
		return
	fi

	case $command in
		"HELP")
			echoWrap "Service run folder=$SERVICERUNFOLDER"
			echoWrap "Service Data=$SERVICEDATA"
			echoWrap "Service File=$SERVICEFILE"
			echoWrap "Service Files=$SERVICEFILESFOLDER"
			echoWrap "Service run files=$SERVICERUNFILES"
			echoWrap "Pid folder=$PIDFOLDER"
			echoWrap "Logs folder=$LOGSFOLDER"
			echoWrap "Format:"
			echoWrap "runservice RUN servicename"
			echoWrap "runservice RUNALL"
			echoWrap "runservice KILL servicename"
			echoWrap "runservice KILLALL"
			echoWrap "runservice LOGFILE servicename|ME"
			echoWrap "runservice RMLOG servicename"
			echoWrap "runservice RMALLLOGS"
			echoWrap "runservice PID servicename"
			echoWrap "runservice SHOWPIDS"
			echoWrap
			echoWrap "Service file format:"
			echoWrap "COMMAND command to run"
			echoWrap "COMMAND second command to run"
			echoWrap "COMMAND ..."
			echoWrap "RUNTYPE	once|keepalive|nocontrol|wait, default once"
			echoWrap "LOGFILE path, default $LOGSFOLDER/service.log"
			echoWrap "PIDFILE path, default $PIDFOLDER/service.pid"
			echoWrap "STATUS service"
			echoWrap "PIDFILECNT pidcnt, set the auto PIDFILECNT var manually"
			echoWrap "Pipe commands to ${SERVICEPIPE}"
			;;
		"RUN")
			runOneService $2 $3
			;;
		"RUNALL")
			runAllServices;
			;;
		"KILL")
			killService $2
			;;
		"KILLALL")
			killAllServices
			printInfo "Done killall services"
			;;
		"LOGFILE")
			printLogfile $2
			;;
		"RMLOG")
			removeLog $2
			;;
		"RMALLLOGS")
			removeAllLogs
			;;
		"SHOWPIDS")
			showPid $2;
			;;
		"STATUS")
			showStatus $2
			;;
		"PIDFILECNT")
			PIDFILECNT=$2
			;;
		"REBOOT")
			doReboot
			;;
		"SHUTDOWN")
			doShutdown
			;;
		"ECHOTOPTY")
			TOPTY=$2
			;;
	esac
}

STARTEDAS=$0
init

case $(basename $STARTEDAS) in
	"init")
		if [ "X$(ps --no-headers 1)" = "X" ];then
			main RUNALL
		else
			echoWrap "Can only run as init once, exiting ..."
			exit 1
		fi
		;;
	"servicermt")
		makeMessagePipe
		echo "$@" > ${SERVICEPIPE}
		exit 0
		;;
	"shutdown")
		makeMessagePipe
		echo "SHUTDOWN" > ${SERVICEPIPE}
		exit 0
		;;
	"reboot")
		if [ "X$1" = "X-f" ];then
			$BINDIR/poweroff -r
		else
			makeMessagePipe
			echo "REBOOT" > ${SERVICEPIPE}
		fi
		exit 0
		;;
	*)
		makeMessagePipe
		main $@
		;;
esac

echo ">>>>>>>>>>>>>>>>"
read ENTER
echo ">>>${ENTER}<<<"
echo "<<<<<<<<<<<<<<<<"

while [ $IMRUNNING -eq 1 ]
	do
		makeMessagePipe
		if [ $FIRSTRUNFLAG -eq 1 ] && [ "$(basename "$STARTEDAS")" = "init" ];then
			FIRSTRUNFLAG=0
			runOneService "agetty.service" "tty1"
		fi
		data="$(timeout 5.0 cat ${SERVICEPIPE} 2>/dev/null)"
		if [ ! "X$data" = "X" ];then
			echoWrap $data
			main $data
		fi
	done

