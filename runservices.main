#!/bin/bash

#
# Â©K. D. Hedger. Thu  1 Jun 14:27:16 BST 2017 kdhedger68713@gmail.com
#
# This file (runservices) is part of Init-For-LFS.
#
# Init-For-LFS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# at your option) any later version.
#
# Projects is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Init-For-LFS.  If not, see <http://www.gnu.org/licenses/>.
#

mountTmpFS ()
{
	if [ "X$(basename $STARTEDAS)" = "Xinit" ];then
		if ! mountpoint "@@SYSCONFDIR@@/StartupServices/runtime" &>/dev/null;then
			mount -t tmpfs -o size=2m tmpfs "@@SYSCONFDIR@@/StartupServices/runtime"
		fi
	fi
}

makeMessagePipe ()
{
	if [ -e ${SERVICEPIPE} ];then
		return
	fi

	if [ -w ${SERVICERUNFOLDER} ];then
		while [ ! -e ${SERVICEPIPE} ]
			do
				printInfo "No service pipe at ${SERVICEPIPE} trying again in 5 seconds ..."
				sleep 5
				mkfifo ${SERVICEPIPE} &>/dev/null||true
			done
	else
		mountTmpFS
		makeMessagePipe
	fi
}

#returns 1=number 2=string 0=NULL
testVarType ()
{
	case "$1" in
		[0-9]*)
			return 1
			;;
		[a-zA-Z]*)
			return 2
			;;
		*)
			return 0
			;;
	esac
}

#set file permissions for user files $1=username, $2 perms
setFilePerms ()
{
	if [ $USERID -ne 0 ] && [ "X$USERNAME" != "X" ];then
		chown $USERNAME:$USERNAME "$1" &>/dev/null||true
	fi
	chmod $2 "$1" &>/dev/null||true
}

#$1 command $2 logfile
runSimpleCommand ()
{
	( su - $USERNAME -c "$1" 2>&1 & echo "$!">"${SERVICERUNFOLDER}/lastpid" & ) |tee -a "$2"
}

#$1 command $2 logfile
runCommandAsUser ()
{
	if [ "X$USERNAME" = "X" ];then
		USERNAME=root
	fi

	sudo -u "$USERNAME" /bin/bash - <<EOF
(
:
$1
)  &>>"$2" &
EOF
}

initBaseFolders ()
{

	local basefolder

	if [ -z "$USERID" ];then
		USERID=0
		USERNAME="root"
	fi

	if [ $(testVarType "$USERID";echo $? ) -eq 1 ] && [ "$USERID" -ne 0 ] && [ $(
	testVarType "$USERNAME";echo $? ) -eq 2 ];then
		basefolder="$(getent passwd $USERNAME | cut -d : -f 6)"
	else
		basefolder="@@SYSCONFDIR@@"
	fi

	export CONFFOLDER="$basefolder"
	SERVICEBASE="$CONFFOLDER/StartupServices"
	export SERVICERUNFOLDER=${SERVICEBASE}/runtime
	mkdir -vp "$SERVICERUNFOLDER"
	mountTmpFS

	SERVICEDATA=${SERVICEBASE}/servicedata
	SERVICEFILE=services

	SERVICEFILESFOLDER=${SERVICEBASE}/servicefiles
	SERVICERUNFILES=${SERVICERUNFOLDER}/servicerunfiles
	PIDFOLDER=${SERVICERUNFOLDER}/servicepids
	LOGSFOLDER=${SERVICERUNFOLDER}/servicelogs

	SERVICEPIPE="@@SYSCONFDIR@@/StartupServices/runtime/servicepipe"

	mkdir -p "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
	if [ $USERID -ne 0 ];then
		chown $USERNAME:$USERNAME "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
		chmod 755 "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
	fi
}

init ()
{
	local basefolder
	local userid
	local username

	export BINDIR="@@SBINDIR@@"
	export VERSION="@@VERSION@@"
	export DISPLAY=":0.0"

	VERBOSELEVEL=2

#	if [ -e $CONFFOLDER/service.rc ];then
#		. $CONFFOLDER/service.rc
#	fi
#
#	if [ -e ~/.config/service.rc ];then
#		. ~/.config/service.rc
#	fi

	USERID=$(id -u)
	USERNAME=$(id -nu)

	initBaseFolders

	LOGFILE=
	COMMAND=
	RUNTYPE=
	PIDFILE=
	BASENAME=
	RETRYS=3
	SLEEPTIME=1
	MYLOG=${LOGSFOLDER}/runservices.log
	PIDFILECNT=1
	IMRUNNING=1
	FIRSTRUNFLAG=1

	TOPTY=

	if [ $USERID -eq 0 ];then
		mkfifo ${SERVICEPIPE} &>/dev/null||true
		chmod 666 ${SERVICEPIPE}
	fi
	printInfo "$(date)"
}

echoWrap ()
{
	if [ "X$TOPTY" = "X" ];then
		echo "$@"
	else
		echo $@ >$TOPTY
	fi
}

printInfo ()
{
	case $VERBOSELEVEL in
		0)
			return
			;;
		1)
			echo "$1" 2>/dev/null >> $MYLOG
			;;
		2)
			echoWrap "$1"
			echo "$1" 2>/dev/null >> $MYLOG
			;;
		esac
}

doService ()
{
	local command
	local pid
	local pidfile
	local logfile
	local tries

	if [ "X$COMMAND" != "X" ];then

		if [ "X$LOGFILE" != "X" ];then
			logfile=${LOGSFOLDER}/${LOGFILE}
		else
			logfile="/dev/null"
		fi

		if [ "X$PIDFILE" = "X" ];then
			pidfile=${PIDFOLDER}/${BASENAME}.pid
		fi


	($COMMAND) &>$logfile &
	pid=$!

	if [ "X$(ps --no-headers $pid)" = "X" ];then
		tries=$RETRYS
		printInfo "Error runing command $COMMAND ..."
		while [ "X$(ps --no-headers $pid)" = "X" ]
			do
				for((j=1;j<RETRYS;j++))
					do
						($COMMAND) &>$logfile &
						pid=$!
						((tries--))
						printInfo "$tries tries left ..."
						sleep 1
					done
				printInfo "Can't run $BASENAME, giving up ..."
				rm $pidfile &>/dev/null||true
				return
			done
	fi
			
	echo $pid > $pidfile
	fi
}

doRunService ()
{
	local base command logfile pidfile runtype
	local pid
	local tries
	local exitcode
	local failed
	local count

	base=$1
	command=$2
	logfile=$3
	pidfile=$4
	runtype=$5

	if [ "X$command" != "X" ];then
		if [ $runtype != "nocontrol" ];then
			if [ -e "$pidfile" ];then
				if [ "X$(ps  --no-headers $(cat "$pidfile"))" = "X" ];then
					printInfo "Removing stale pidfile ..."
					rm $pidfile||true
				else
					printInfo "Already running under my control, doing nothing ..."
					return
				fi
			fi
		fi

		if [ $runtype = "once" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do
					runSimpleCommand "$command" "$logfile" &
					pid=$(cat "${SERVICERUNFOLDER}/lastpid" 2>/dev/null)
					rm "${SERVICERUNFOLDER}/lastpid" &>/dev/null

					if [ "X$pid" = "X" ];then
						printInfo "Try $j failed (returned $?), Trying again ..."
						sleep 1
						failed=1
						continue
					fi
					if kill -0 $pid &>/dev/null;then
						echo $pid > $pidfile
						break
					else
						printInfo "Try $j failed (returned $?), Trying again ..."
						sleep 1
						failed=1
					fi
				done

			if [ $failed -eq 1 ];then
				printInfo "Can't run $command"
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

		if [ $runtype = "keepalive" ];then
			touch ${SERVICERUNFILES}/${base}.${PIDFILECNT}.keepalive
			file=${SERVICERUNFILES}/${base}.${PIDFILECNT}.runfile

			cat > $file << EOF
#!/bin/bash
	while [ -e "${SERVICERUNFILES}/${base}.${PIDFILECNT}.keepalive" ]
		do
			$command &
			pid=\$!
			echo \$pid > $pidfile
			while kill -0 \$pid &>/dev/null
				do
					sleep 1
				done
			sleep 1
		done
EOF
			setFilePerms "$file" 755
			runCommandAsUser "${SERVICERUNFILES}/${base}.${PIDFILECNT}.runfile" "$logfile"
			printInfo "${base}.${PIDFILECNT} launched."
		fi

		if [ $runtype = "nocontrol" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do

					su - $USERNAME -c "$command &>$logfile" &
					pid=$!
#check whether process is still running
					count=$(ps -A| grep $pid |wc -l)
#if process is already terminated, then there can be two cases, the process executed and stop successfully or it is terminated abnormally
					if [[ $count -eq 0 ]];then
#checks if process executed successfully or not
						if wait $pid; then
        		        	break;
						else
#process terminated abnormally
							printInfo "Try $j failed (returned $?), Trying again ..."
							failed=1
						fi
					else
#process is still running
						break
					fi
				done
			if [ $failed -eq 1 ];then
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

#wait for command to finish
		if [ $runtype = "wait" ];then
				su - $USERNAME -c "$command &>$logfile"
		fi
	fi
}

runOneService ()
{
	local com
	local args
	local base logfile command runtype pidfile
	local comcnt
	local serviceargs
	local fd

	base=${1%%.?*}
	serviceargs=$2

	pidfile=${PIDFOLDER}/${base}.${PIDFILECNT}.pid	
	logfile=${LOGSFOLDER}/${base}.log
	runtype="once"
#set files etc
	exec {fd}<"${SERVICEFILESFOLDER}/${base}.service"
	while read -u ${fd}
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//')"
			case "$com" in
				"LOGFILE")
					logfile=$args
					;;
				"RUNTYPE")
					runtype=$args
					;;
				"PIDFILE")
					pidfile=$args
					;;
			esac
		done
	exec {fd}<&-

#run the commands
	exec {fd}<"${SERVICEFILESFOLDER}/${base}.service"
	while read -u ${fd}
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//') $serviceargs"
			if [ "X$com" = "XCOMMAND" ];then
				if [ "X$args" != "X" ] ;then
					doRunService $base "$args" $logfile $pidfile $runtype < /dev/null
					sleep 0.1
				fi
			fi
		done
	(( PIDFILECNT++ ))
	exec {fd}<&-
}

runAllServices ()
{
	local replyarray
	local fd

	exec {fd}<"${SERVICEDATA}/${SERVICEFILE}"
	rm ${PIDFOLDER}/*.pid &>/dev/null||true
	while read -u ${fd}
		do
			replyarray=( $REPLY )
			if [ "X${replyarray[0]}" != "X" ];then
				if [ "X${replyarray[0]##?*.}" = "Xservice" ];then
					printInfo "launching ${replyarray[0]}"
					runOneService ${replyarray[0]%%.?*} ${replyarray[1]}
				else
					printInfo "Evaluating command $REPLY"
					su - $USERNAME -c "${REPLY}"
				fi
			fi
		done
	exec {fd}<&-
}	

killServiceNamed ()
{
	local servname

	for arg in ${PIDFOLDER}/${1}.*.pid
		do
			servname=$(basename ${arg%.pid})
			rm ${SERVICERUNFILES}/${servname}.keepalive &>/dev/null||true
			kill -9 $(cat $arg) &>/dev/null
			wait $(cat $arg) &>/dev/null
			rm  $arg &>/dev/null||true
			rm ${SERVICERUNFILES}/${servname}.runfile &>/dev/null||true
			printInfo "Killed $(basename ${arg%.pid})"
		done
}

killService ()
{
	local serv="$1"

	if [ -e  ${PIDFOLDER}/${serv}.pid ];then
		rm ${SERVICERUNFILES}/${serv}.keepalive &>/dev/null||true
		kill -9 $(cat ${PIDFOLDER}/${serv}.pid) &>/dev/null
		wait $(cat ${PIDFOLDER}/${serv}.pid) &>/dev/null
		rm  ${PIDFOLDER}/$serv.pid &>/dev/null||true
		rm ${SERVICERUNFILES}/${serv}.runfile &>/dev/null||true
		printInfo "Killed $serv"
	else
		printInfo "$serv not under my control ..."
	fi
}


killAllServices ()
{
	local fd

	exec {fd}< <(find "${PIDFOLDER}" -maxdepth 1 -iname "*.pid")
	while read -u ${fd}
		do
			printInfo "Killing ${REPLY%.pid} ..."
			killService "$(basename "$REPLY" ".pid" )" &>/dev/null
		done
	exec {fd}<&-
}	

printLogfile ()
{
	local logname="$1"

	if [ "X$logname" = "XME" ];then
		logname="runservices"
	fi

	if [ "X$logname" = "XINIT" ];then
		USERID=-1
		USERNAME="init"

		initBaseFolders
		logname="runservices"
	fi

	if [ -e  ${LOGSFOLDER}/${logname}.log ];then
		if [ "X$TOPTY" = "X" ];then
			cat ${LOGSFOLDER}/${logname}.log
		else
			cat ${LOGSFOLDER}/${logname}.log > $TOPTY
		fi
	else
		echoWrap "No log for $1 ..."
	fi
}

removeLog ()
{
	if [ -e  ${LOGSFOLDER}/${1}.log ];then
		rm ${LOGSFOLDER}/${1}.log
	else
		echoWrap "No log for $1 ..."
	fi
}

removeAllLogs ()
{
	rm ${LOGSFOLDER}/*.log||true
}

showPid ()
{
	local fd

	exec {fd}< <(find "${PIDFOLDER}" -maxdepth 1 -iname "*.pid")
	while read -u ${fd}
		do
			echoWrap "Pid of $(basename "$REPLY")=$(cat $REPLY)"
		done
	exec {fd}<&-
}

showStatus ()
{
	local count
	local pid

	if [ -e ${PIDFOLDER}/${1}.pid ];then
		pid=$(cat ${PIDFOLDER}/${1}.pid)
		echoWrap "Recorded pid of $1=$pid"
		count=$(ps -A| grep $pid |wc -l)
		if [[ $count -eq 0 ]];then
			echoWrap "Hmmm ... $1 seems to have exited"
		else
			echoWrap "Details:"
			ps $pid
			if [ -e ${SERVICERUNFILES}/${1}.runfile ];then
				echoWrap "Keeping alive file=${SERVICERUNFILES}/${1}.runfile"
			fi
			if [ -e ${LOGSFOLDER}/${1}.log ];then
				echoWrap "Logfile=${LOGSFOLDER}/${1}.log"
			fi
		fi
	else
		printInfo "$1 not under my control ..."
	fi
}

doReboot ()
{
	USERID=0
	USERNAME="root"

	who|grep -v root|awk '{print $1}'|sort -u|xargs -r pkill -u &>/dev/null
	initBaseFolders
	killAllServices
	rm -f ${SERVICEPIPE}
	umount -l "$SERVICERUNFOLDER"
	$CONFFOLDER/StartupServices/startups/3
	$BINDIR/poweroff -r now
}

doShutdown ()
{
	USERID=0
	USERNAME="root"
	
	who|grep -v root|awk '{print $1}'|sort -u|xargs -r pkill -u &>/dev/null
	initBaseFolders
	killAllServices
	rm -f ${SERVICEPIPE}
	umount -l "$SERVICERUNFOLDER"
	$CONFFOLDER/StartupServices/startups/3
	$BINDIR/poweroff -h now
}

main ()
{
	local command=$1

	if [ "X$command" = "X" ];then
		return
	fi

	case $command in
		"HELP")
			echoWrap "Version $VERSION"
			echoWrap "Service run folder=$SERVICERUNFOLDER"
			echoWrap "Service Data=$SERVICEDATA"
			echoWrap "Service File=$SERVICEFILE"
			echoWrap "Service Files=$SERVICEFILESFOLDER"
			echoWrap "Service run files=$SERVICERUNFILES"
			echoWrap "Pid folder=$PIDFOLDER"
			echoWrap "Logs folder=$LOGSFOLDER"
			echoWrap "Format:"
			echoWrap "servicermt RUN servicename. Run service 'servicename' ( without suffix )."
			echoWrap "servicermt RUNALL. Run all services for current user."
			echoWrap "servicermt KILLBYNAME servicename. Kill all services named servicename."
			echoWrap "servicermt KILL servicename. Kill single service named servicename"
			echoWrap "servicermt KILLALL. Kill all running services."
			echoWrap "servicermt LOGFILE servicename|ME|INIT. Show log for 'servicename', user log ( ME ) or init log ( INIT )."
			echoWrap "servicermt RMLOG servicename. Delete log for 'servicename'."
			echoWrap "servicermt RMALLLOGS. Delete all service logs."
			echoWrap "servicermt SHOWPIDS. Show all pids for current user."
			echoWrap "servicermt STATUS servicename. Show current status for 'servicename'"
			echoWrap "servicermt PIDFILECNT pidcnt. Set the auto number for services."
			echoWrap "servicermt REBOOT"
			echoWrap "servicermt SHUTDOWN"
			echoWrap "servicermt ECHOTOPTY tty. Send output to tty"
			echoWrap "servicermt SETVERBOSE 0|1|2. Set verbosity, 0=quiet, 1=echo to tty, 2=echo to tty and log ( default )."
			echoWrap
			echoWrap "Service file format:"
			echoWrap "COMMAND command to run"
			echoWrap "COMMAND second command to run"
			echoWrap "COMMAND ..."
			echoWrap "RUNTYPE	once|keepalive|nocontrol|wait, default once"
			echoWrap "LOGFILE path, default $LOGSFOLDER/service.log"
			echoWrap "PIDFILE path, default $PIDFOLDER/service.pid"
			echoWrap
			echoWrap "Pipe commands to ${SERVICEPIPE}"
			;;
		"RUN")
			runOneService $2 $3
			;;
		"RUNALL")
			runAllServices;
			;;
		"KILL")
			killService $2
			;;
		"KILLALL")
			killAllServices
			printInfo "Done killall services"
			;;
		"KILLBYNAME")
			killServiceNamed $2
			;;
		"LOGFILE")
			printLogfile $2
			;;
		"RMLOG")
			removeLog $2
			;;
		"RMALLLOGS")
			removeAllLogs
			;;
		"SHOWPIDS")
			showPid;
			;;
		"STATUS")
			showStatus $2
			;;
		"PIDFILECNT")
			PIDFILECNT=$2
			;;
		"REBOOT")
			if [ $USERID -ne 0 ];then
				printInfo "Must be root to reboot ..."
			else
				doReboot
			fi
			;;
		"SHUTDOWN")
			if [ $USERID -ne 0 ];then
				printInfo "Must be root to shutdown ..."
			else
				doShutdown
			fi
			;;
		"ECHOTOPTY")
			TOPTY=$2
			;;
		"SETVERBOSE")
			VERBOSELEVEL=$2
			;;
#user services
		"SETUSER")
			USERID=$2
			USERNAME=$3
			initBaseFolders
			;;		
	esac
}

STARTEDAS=$0
init

case $(basename $STARTEDAS) in
	"init")
		if [ "X$(ps --no-headers 1)" = "X" ];then
			main RUNALL
		else
			echoWrap "Can only run as init once, exiting ..."
			exit 1
		fi
		;;
	"servicermt")
		holdtty=$TOPTY
		makeMessagePipe
		echo "ECHOTOPTY" $(tty) > ${SERVICEPIPE}
		echo "SETUSER" $(id -u) $(id -nu) > ${SERVICEPIPE}
		echo "$@" > ${SERVICEPIPE}
		echo "ECHOTOPTY" $holdtty > ${SERVICEPIPE}
		echo "SETUSER" "0" "root" > ${SERVICEPIPE}
		exit 0
		;;
	"shutdown")
		if [ "$(id -u)" -ne 0 ];then
			printInfo "Must be root to shutdown ..."
			exit 0
		fi
		if [ "X$1" = "X-f" ];then
			printInfo "Forced power off ..."
			$BINDIR/poweroff -h now
		else
			makeMessagePipe
			echo "SHUTDOWN" > ${SERVICEPIPE}
		fi
		exit 0
		;;
	"reboot")
		if [ "$(id -u)" -ne 0 ];then
			printInfo "Must be root to reboot ..."
			exit 0
		fi
		if [ "X$1" = "X-f" ];then
			printInfo "Forced reboot ..."
			$BINDIR/poweroff -r
		else
			if [ "X$SUDO_USER" != "X" ];then
				USERID=$SUDO_UID
				USERNAME="$SUDO_USER"
				initBaseFolders
				killAllServices
			fi

			makeMessagePipe
			echo "REBOOT" > ${SERVICEPIPE}
		fi
		exit 0
		;;
	*)
		printInfo "Called as $0 ..."
		#exit 0
		;;
esac

while [ $IMRUNNING -eq 1 ]
	do
		makeMessagePipe
		if [ $FIRSTRUNFLAG -eq 1 ] && [ "$(basename "$STARTEDAS")" = "init" ];then
			FIRSTRUNFLAG=0
			runOneService "agetty.service" "tty1"
		fi

		while read
			do
				printInfo "$REPLY"
				main $REPLY
			done <${SERVICEPIPE}
	done
