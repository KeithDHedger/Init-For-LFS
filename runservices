#!/bin/bash

#Â©keithhedger Sat 4 Mar 15:35:56 GMT 2017 kdhedger68713@gmail.com

init ()
{
	SERVICERUNFOLDER=/run/StartupServices
	SERVICEDATA=~/StartupServices/servicedata
	SERVICEFILESFOLDER=~/StartupServices/servicefiles
	SERVICERUNFILES=${SERVICERUNFOLDER}/servicerunfiles
	PIDFOLDER=${SERVICERUNFOLDER}/servicepids
	LOGSFOLDER=${SERVICERUNFOLDER}/servicelogs
	VERBOSELEVEL=2

	if [ -e ~/StartupServices/servicedata/service.rc ];then
		. ~/StartupServices/servicedata/service.rc
	fi

	LOGFILE=
	COMMAND=
	RUNTYPE=
	PIDFILE=
	BASENAME=
	RETRYS=3
	SLEEPTIME=1
	MYLOG=${LOGSFOLDER}/runservices.log

	mkdir -p "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
	printInfo "$(date)"
}

printInfo ()
{
	case $VERBOSELEVEL in
		0)
			return
			;;
		1)
			echo "$1" >> $MYLOG
			;;
		2)
			echo "$1"
			echo "$1" >> $MYLOG
			;;
		esac
}

doService ()
{
	local command
	local pid
	local pidfile
	local logfile
	local tries

	if [ "X$COMMAND" != "X" ];then

		if [ "X$LOGFILE" != "X" ];then
			logfile=${LOGSFOLDER}/${LOGFILE}
		else
			logfile="/dev/null"
		fi

		if [ "X$PIDFILE" = "X" ];then
			pidfile=${PIDFOLDER}/${BASENAME}.pid
		fi


	($COMMAND) &>$logfile &
	pid=$!

	if [ "X$(ps --no-headers $pid)" = "X" ];then
		tries=$RETRYS
		printInfo "Error runing command $COMMAND ..."
		while [ "X$(ps --no-headers $pid)" = "X" ]
			do
				for((j=1;j<RETRYS;j++))
					do
						($COMMAND) &>$logfile &
						pid=$!
						((tries--))
						printInfo "$tries tries left ..."
						sleep 1
					done
				printInfo "Can't run $BASENAME, giving up ..."
				rm $pidfile &>/dev/null||true
				return
			done
	fi
			
	echo $pid > $pidfile

#	echo "log=$LOGFILE, rt=$RUNTYPE, command=$COMMAND, pidfile=$pidfile, basename=$BASENAME "
	fi
}

doRunService ()
{
	local base command logfile pidfile runtype
	local pid
	local tries
	local exitcode
	local failed
	local count

	base=$1
	command=$2
	logfile=$3
	pidfile=$4
	runtype=$5

#	echo " basename=$1, command=$2 log=$3, pidfile=$4, rt=$5"
#	echo " basename=$base, command=$command log=$logfile, pidfile=$pidfile, rt=$runtype"

	if [ "X$command" != "X" ];then
		if [ $runtype != "nocontrol" ];then
			if [ -e "$pidfile" ];then
				if [ "X$(ps  --no-headers $(cat "$pidfile"))" = "X" ];then
					printInfo "Removing stale pidfile ..."
					rm $pidfile||true
				else
					printInfo "Already running under my control, doing nothing ..."
					return
				fi
			fi
		fi

		if [ $runtype = "once" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do
					$command &>>$logfile &
					pid=$!
#check whether process is still running
					count=$(ps -A| grep $pid |wc -l)
#if process is already terminated, then there can be two cases, the process executed and stop successfully or it is terminated abnormally
					if [[ $count -eq 0 ]];then
#checks if process executed successfully or not
						if wait $pid; then
        		        	break;
						else
#process terminated abnormally
							printInfo "Try $j failed (returned $?), Trying again ..."
							failed=1
						fi
					else
#process is still running
						echo $pid > $pidfile
						break
					fi
				done
			if [ $failed -eq 1 ];then
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

		if [ $runtype = "keepalive" ];then
			touch ${SERVICERUNFILES}/${base}.keepalive
			file=${SERVICERUNFILES}/${base}.runfile
			cat > $file << EOF
#!/bin/bash
	while [ -e ${base}.keepalive ]
		do
			($command) &>>$logfile &
			pid=\$!
			echo \$pid > $pidfile
			while kill -0 \$pid &>/dev/null
				do
					sleep 1
				done
			sleep 1
		done
EOF
			chmod +x $file
			(cd ${SERVICERUNFILES};./${base}.runfile) &
			printInfo "$base launched succsefully"
		fi

		if [ $runtype = "nocontrol" ];then
			failed=0
			for ((j=0;j<RETRYS;j++))
				do
					$command &>>$logfile &
					pid=$!
#check whether process is still running
					count=$(ps -A| grep $pid |wc -l)
#if process is already terminated, then there can be two cases, the process executed and stop successfully or it is terminated abnormally
					if [[ $count -eq 0 ]];then
#checks if process executed successfully or not
						if wait $pid; then
        		        	break;
						else
#process terminated abnormally
							printInfo "Try $j failed (returned $?), Trying again ..."
							failed=1
						fi
					else
#process is still running
						break
					fi
				done
			if [ $failed -eq 1 ];then
				printInfo "Giving up ..."
			else
				printInfo "$base launched succsefully"
			fi
		fi

#wait for command to finish
		if [ $runtype = "wait" ];then
			$command &>>$logfile
		fi
	fi
}

runOneService ()
{
	local com
	local args
	local base logfile command runtype pidfile
	local comcnt

	base=${1%%.?*}

	pidfile=${PIDFOLDER}/${base}.pid	
	logfile=${LOGSFOLDER}/${base}.log
	runtype="once"

#set files etc
	while read
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//')"
			case "$com" in
				"LOGFILE")
					logfile=$args
					;;
				"RUNTYPE")
					runtype=$args
					;;
				"PIDFILE")
					pidfile=$args
					;;
			esac
		done < ${SERVICEFILESFOLDER}/${base}.service

#run the commands
	while read
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//')"
			if [ "X$com" = "XCOMMAND" ];then
				if [ "X$args" != "X" ] ;then
					doRunService $base "$args" $logfile $pidfile $runtype < /dev/null
					sleep 0.1
				fi
			fi
		done < <(cat ${SERVICEFILESFOLDER}/${base}.service)
}

runAllServices ()
{
	rm ${PIDFOLDER}/*.pid &>/dev/null||true
	while read
		do
			if [ "X$REPLY" != "X" ];then
				if [ "X${REPLY##?*.}" = "Xservice" ];then
					printInfo "launching $REPLY"
					runOneService ${REPLY%%.?*}
				else
					printInfo "Evaluating command $REPLY"
					eval "${REPLY}"
				fi
			fi
		done < ${SERVICEDATA}/services
}	

killService ()
{
	if [ -e  ${PIDFOLDER}/${1}.pid ];then
		rm ${SERVICERUNFILES}/${1}.keepalive &>/dev/null||true
		kill -9 $(cat ${PIDFOLDER}/$1.pid)
		rm  ${PIDFOLDER}/$1.pid &>/dev/null||true
		rm ${SERVICERUNFILES}/${1}.runfile &>/dev/null||true
		printInfo "Killed $1"
	else
		printInfo "$1 not under my control ..."
	fi
}

killAllServices ()
{
	while read
		do
			if [ "X${REPLY##?*.}" = "Xservice" ];then
				killService ${REPLY%%.?*}
			fi
		done < <(tac ${SERVICEDATA}/services)
}	

printLogfile ()
{
	local logname="$1"

	if [ "X$logname" = "XME" ];then
		logname="runservices"
	fi

	if [ -e  ${LOGSFOLDER}/${logname}.log ];then
		cat ${LOGSFOLDER}/${logname}.log
	else
		echo "No log for $1 ..."
	fi
}

removeLog ()
{
	if [ -e  ${LOGSFOLDER}/${1}.log ];then
		rm ${LOGSFOLDER}/${1}.log
	else
		echo "No log for $1 ..."
	fi
}

removeAllLogs ()
{
	rm ${LOGSFOLDER}/*.log||true
}

showPid ()
{
	if [ -e ${PIDFOLDER}/${1}.pid ];then
		printInfo "$(cat ${PIDFOLDER}/${1}.pid)"
	else
		printInfo "$1 not under my control ..."
	fi
}

showStatus ()
{
	local count
	local pid

	if [ -e ${PIDFOLDER}/${1}.pid ];then
		pid=$(cat ${PIDFOLDER}/${1}.pid)
		echo "Recorded pid of $1=$pid"
		count=$(ps -A| grep $pid |wc -l)
		if [[ $count -eq 0 ]];then
			echo "Hmmm ... $1 seems to have exited"
		else
			echo "Details:"
			ps $pid
			if [ -e ${SERVICERUNFILES}/${1}.runfile ];then
				echo "Keeping alive file=${SERVICERUNFILES}/${1}.runfile"
			fi
			if [ -e ${LOGSFOLDER}/${1}.log ];then
				echo "Logfile=${LOGSFOLDER}/${1}.log"
			fi
		fi
	else
		printInfo "$1 not under my control ..."
	fi
}

main ()
{
	if [ "X$1" = "X" ];then
		echo "need command ..."
		exit 1
	else
		case $1 in
			"HELP")
				echo "Service run folder=$SERVICERUNFOLDER"
				echo "Service Data=$SERVICEDATA"
				echo "Service Files=$SERVICEFILESFOLDER"
				echo "Service run files=$SERVICERUNFILES"
				echo "Pid folder=$PIDFOLDER"
				echo "Logs folder=$LOGSFOLDER"
				echo "Format:"
				echo "runservice RUN servicename"
				echo "runservice RUNALL"
				echo "runservice KILL servicename"
				echo "runservice KILLALL"
				echo "runservice LOGFILE servicename|ME"
				echo "runservice RMLOG servicename"
				echo "runservice RMALLLOGS"
				echo "runservice PID servicename"
				echo
				echo "Service file format:"
				echo "COMMAND command to run"
				echo "COMMAND second command to run"
				echo "COMMAND ..."
				echo "RUNTYPE	once|keepalive|nocontrol|wait, default once"
				echo "LOGFILE path, default $LOGSFOLDER/service.log"
				echo "PIDFILE path, default $PIDFOLDER/service.pid"
				echo "STATUS service"
				exit 0
				;;
			"RUN")
				runOneService $2
				;;
			"RUNALL")
				runAllServices;
				;;
			"KILL")
				killService $2
				;;
			"KILLALL")
				killAllServices
				;;
			"LOGFILE")
				printLogfile $2
				;;
			"RMLOG")
				removeLog $2
				;;
			"RMALLLOGS")
				removeAllLogs
				;;
			"PID")
				showPid $2;
				;;
			"STATUS")
				showStatus $2
				;;
		esac
	fi
}

init
main $@



