#!/bin/bash

#Â©keithhedger Sat 4 Mar 15:35:56 GMT 2017 kdhedger68713@gmail.com

init ()
{
	SERVICEBASEFOLDER=/run/StartupServices
	SERVICEDATA=/media/LinuxData/Development/Projects/StartupServices/servicedata
	SERVICEFILESFOLDER=/media/LinuxData/Development/Projects/StartupServices/servicefiles
	SERVICERUNFILES=${SERVICEBASEFOLDER}/servicerunfiles
	LOGFILE=
	COMMAND=
	RUNTYPE=
	PIDFILE=
	PIDFOLDER=${SERVICEBASEFOLDER}/servicepids
	BASENAME=
	LOGSFOLDER=${SERVICEBASEFOLDER}/servicelogs
	RETRYS=3

	mkdir -p "$SERVICERUNFILES" "$PIDFOLDER" "$LOGSFOLDER" &>/dev/null||true
}

doService ()
{
	local command
	local pid
	local pidfile
	local logfile
	local tries

	if [ "X$COMMAND" != "X" ];then

		if [ "X$LOGFILE" != "X" ];then
			logfile=${LOGSFOLDER}/${LOGFILE}
		else
			logfile="/dev/null"
		fi

		if [ "X$PIDFILE" = "X" ];then
			pidfile=${PIDFOLDER}/${BASENAME}.pid
		fi


	($COMMAND) &>$logfile &
	pid=$!

	if [ "X$(ps --no-headers $pid)" = "X" ];then
		tries=$RETRYS
		echo "Error runing command $COMMAND ..."
		while [ "X$(ps --no-headers $pid)" = "X" ]
			do
				for((j=1;j<RETRYS;j++))
					do
						($COMMAND) &>$logfile &
						pid=$!
						((tries--))
						echo "$tries tries left ..."
						sleep 1
					done
				echo "Can't run $BASENAME, giving up ..."
				rm $pidfile &>/dev/null||true
				return
			done
	fi
			
	echo $pid > $pidfile

	echo "log=$LOGFILE, rt=$RUNTYPE, command=$COMMAND, pidfile=$pidfile, basename=$BASENAME "
	fi
}

doRunService ()
{
	local base command logfile pidfile runtype
	local pid
	local tries

	base=$1
	command=$2
	logfile=$3
	pidfile=$4
	runtype=$5

#	echo " basename=$1, command=$2 log=$3, pidfile=$4, rt=$5"
	echo " basename=$base, command=$command log=$logfile, pidfile=$pidfile, rt=$runtype"

	if [ "X$command" != "X" ];then
		if [ -e "$pidfile" ];then
			if [ "X$(ps  --no-headers $(cat "$pidfile"))" = "X" ];then
				echo "Removing stale pidfile ..."
				rm $pidfile||true
			else
				echo "Already running under my control, doing nothing ..."
			return
			fi
		fi

		if [ $runtype = "once" ];then
			($command) &>$logfile &
			pid=$!

			if [ "X$(ps --no-headers $pid)" = "X" ];then
				tries=$RETRYS
				echo "Error runing command $command ..."
				while [ "X$(ps --no-headers $pid)" = "X" ]
					do
						for((j=1;j<RETRYS;j++))
							do
								($command) &>$logfile &
								pid=$!
								((tries--))
								echo "$tries tries left ..."
								sleep 1
							done
						echo "Can't run $base, giving up ..."
						rm $pidfile &>/dev/null||true
					done
			fi
			echo $pid > $pidfile
		fi

		if [ $runtype = "keepalive" ];then
			touch ${SERVICERUNFILES}/${base}.keepalive
			file=${SERVICERUNFILES}/${base}
			cat > $file << EOF
#!/bin/bash
	while [ -e ${base}.keepalive ]
		do
			($command) &>$logfile &
			pid=\$!
			echo \$pid > $pidfile
			waitpid \$pid
		done
EOF
			chmod +x $file
			(cd ${SERVICERUNFILES};./${base}) &
		fi
	fi
}

runOneService ()
{
	local com
	local args
	local base logfile command runtype pidfile

	base=${1%%.?*}

	pidfile=${PIDFOLDER}/${base}.pid	
	logfile=${LOGSFOLDER}/${base}.log
	runtype="once"

	while read
		do
			com=$(echo $REPLY|awk '{print $1}')
			args="$(echo -e "${REPLY:${#com}:1000}" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//')"
			case "$com" in
				"LOGFILE")
					logfile=$args
					;;
				"RUNTYPE")
					runtype=$args
					;;
				"COMMAND")
					command=$args
					;;
				"PIDFILE")
					pidfile=$args
					;;
			esac
		done < ${SERVICEFILESFOLDER}/${base}.service

#	if [ "X$command" != "X" ] && [ "X$runtype" = "Xonce" ] ;then
	if [ "X$command" != "X" ] ;then
			doRunService $base "$command" $logfile $pidfile $runtype
	fi
}

runAllServices ()
{
	rm ${PIDFOLDER}/*.pid &>/dev/null||true
	while read
		do
			runOneService ${REPLY%%.?*}
		done < ${SERVICEDATA}/services
}	

killService ()
{
	if [ -e  ${PIDFOLDER}/${1}.pid ];then
		rm ${SERVICERUNFILES}/${1}.keepalive &>/dev/null||true
		rm ${SERVICERUNFILES}/${1} &>/dev/null||true
		kill -9 $(cat ${PIDFOLDER}/$1.pid)
		rm  ${PIDFOLDER}/$1.pid &>/dev/null||true
	else
		echo "$1 not under my control ..."
	fi
}

killAllServices ()
{
	while read
		do
			killService ${REPLY%%.?*}
		done < ${SERVICEDATA}/services
}	

main ()
{
	if [ "X$1" = "X" ];then
		echo "need command ..."
		exit 1
	else	
		case $1 in
			"RUN")
				runOneService $2
				;;
			"RUNALL")
				runAllServices;
				;;
			"KILL")
				killService $2
				;;
			"KILLALL")
				killAllServices
				;;
		esac
	fi
}

init
main $@



